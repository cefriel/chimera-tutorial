<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
			   http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
			   http://camel.apache.org/schema/spring
			   http://camel.apache.org/schema/spring/camel-spring.xsd
			   http://www.springframework.org/schema/util
			   http://www.springframework.org/schema/util/spring-util-4.2.xsd">

  <!-- SINGLE RESOURCES -->

  <bean id="inputSource1" class="com.cefriel.util.ChimeraResourceBean">
    <property name="url" value="file:///home/inbox/my-source.ttl"/>
    <property name="serializationFormat" value="turtle"></property>
  </bean>

  <bean id="rmlMapping" class="com.cefriel.util.ChimeraResourceBean">
    <property name="url" value="file:///home/mappings/rml/mappings.rml.ttl"/>
    <property name="serializationFormat" value="turtle"></property>
  </bean>

  <bean id="sparqlQuery" class="com.cefriel.util.ChimeraResourceBean">
    <property name="url" value="file:///home/queries/construct.txt"/>
    <property name="serializationFormat" value="turtle"></property>
  </bean>

  <bean id="ontology" class="com.cefriel.util.ChimeraResourceBean">
    <property name="url" value="file:///home/ontologies/ontology.owl"/>
    <property name="serializationFormat" value="rdfxml"></property>
  </bean>

  <bean id="liftingTemplate" class="com.cefriel.util.ChimeraResourceBean">
    <property name="url" value="file:///home/mappings/vtl/liftingTemplate.vm"/>
    <property name="serializationFormat" value="vtl"></property>
  </bean>

  <bean id="loweringTemplate" class="com.cefriel.util.ChimeraResourceBean">
    <property name="url" value="file:///home/mappings/vtl/loweringTemplate.vm"/>
    <property name="serializationFormat" value="vtl"></property>
  </bean>

  <bean id="stopsShaclShape" class='com.cefriel.util.ChimeraResourceBean'>
    <property name='url' value= "file://home/shacl-shapes/gtfsStopShacl.ttl"/>
    <property name='serializationFormat' value= "turtle"/>
  </bean>

  <!-- LISTS OF RESOURCES -->

  <bean id="triples" class="com.cefriel.util.ChimeraResourcesBean">
    <property name="resources">
      <list>
	<ref bean="inputSource1"/>
      </list>
    </property>
  </bean>

  <bean id="queries" class="com.cefriel.util.ChimeraResourcesBean">
    <property name="resources">
      <list>
	<ref bean="sparqlQuery"/>
      </list>
    </property>
  </bean>

  <bean id="ontologies" class="com.cefriel.util.ChimeraResourcesBean">
    <property name="resources">
      <list>
	<ref bean="ontology"/>
      </list>
    </property>
  </bean>

  <bean id='rmlMappings' class='com.cefriel.util.ChimeraResourcesBean'>
    <property name="resources">
      <list>
	<ref bean="rmlMapping"/>
      </list>
    </property>
  </bean>

  <bean id="shaclShapes" class='com.cefriel.util.ChimeraResourcesBean'>
    <property name="resources">
      <list>
	<ref bean="stopsShaclShape"/>
      </list>
    </property>
  </bean>

  <bean class="org.apache.camel.dataformat.zipfile.ZipSplitter" id="zip_splitter"/>

  <camelContext xmlns="http://camel.apache.org/schema/spring">
    <camel:restConfiguration component="undertow" contextPath="/chimera-demo" port="8888"/>
    <camel:rest id="restTutorial">

      <camel:post path="/lift">
	<camel:to uri="seda:lift?timeout=0"/>
      </camel:post>

      <camel:post path="/liftConstruct">
	<camel:to uri="seda:liftConstruct?timeout=0"/>
      </camel:post>

      <camel:post path="/roundtrip">
	<camel:to uri="seda:roundtrip?timeout=0"/>
      </camel:post>

      <camel:post path="/roundtripAdd">
	<camel:to uri="seda:roundtripAdd?timeout=0"/>
      </camel:post>

      <camel:post path="/roundtripInference">
	<camel:to uri="seda:roundtripInference?timeout=0"/>
      </camel:post>

      <camel:post path="/roundtripTemplate">
	<camel:to uri="seda:roundtripTemplate?timeout=0"/>
      </camel:post>
    </camel:rest>

    <camel:route id="dumpGraph">
      <camel:from uri="direct:dump"/>
      <camel:to uri="graph://dump?filename=dump.ttl&amp;basePath=./home/outbox&amp;dumpFormat=turtle"/>
    </camel:route>

    <camel:route id="lowerToCsv">
      <camel:from uri="direct:lowerToCsv"/>
      <camel:to uri= "mapt://rdf?template=#bean:loweringTemplate&amp;basePath=./home/outbox&amp;fileName=gtfs-stops.csv"/>
    </camel:route>

    <camel:route id="inferenceRoute">
      <camel:from uri="direct:inference"/>
      <camel:to uri="graph://inference?chimeraResources=#bean:ontologies"/>
    </camel:route>

    <camel:route id="lift">
      <camel:from uri="seda:lift"/>
      <camel:split streaming="true">
	<ref>zip_splitter</ref>
	<convertBodyTo type="java.io.InputStream"/>
	<camel:filter id="filter_stops1">
	  <camel:simple>${file:name} == "stops.txt"</camel:simple>
	  <camel:choice>
	    <camel:when>
	      <camel:simple>${body} != null</camel:simple>
	      <camel:setHeader name="Exchange.FILE_NAME">
		<camel:simple>${file:name}</camel:simple>
	      </camel:setHeader>
	      <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>

	      <camel:to uri="rml://?streamName=stops.txt&amp;mappings=#bean:rmlMappings&amp;baseIri=https://www.cefriel.com/data/&amp;baseIriPrefix=cef"/>
	      <camel:to uri="direct:dump"/>

	    </camel:when>
	    <camel:otherwise>
	      <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
	    </camel:otherwise>
	  </camel:choice>
	</camel:filter>
      </camel:split>
    </camel:route>

    <camel:route id="liftConstruct">
      <camel:from uri="seda:liftConstruct"/>
      <camel:split streaming="true">
	<ref>zip_splitter</ref>
	<convertBodyTo type="java.io.InputStream"/>
	<camel:filter id="filter_stops2">
	  <camel:simple>${file:name} == "stops.txt"</camel:simple>
	  <camel:choice>
	    <camel:when>
	      <camel:simple>${body} != null</camel:simple>
	      <camel:setHeader name="Exchange.FILE_NAME">
		<camel:simple>${file:name}</camel:simple>
	      </camel:setHeader>
	      <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>

	      <camel:to uri="rml://?streamName=stops.txt&amp;mappings=#bean:rmlMappings&amp;baseIri=https://www.cefriel.com/data/&amp;baseIriPrefix=cef"/>
	      <camel:to uri="graph://construct?chimeraResources=#bean:queries"/>
	      <camel:to uri="direct:dump"/>

	    </camel:when>
	    <camel:otherwise>
	      <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
	    </camel:otherwise>
	  </camel:choice>
	</camel:filter>
      </camel:split>
    </camel:route>

    <camel:route id="roundtrip">
      <camel:from uri="seda:roundtrip"/>
      <camel:split streaming="true">
	<ref>zip_splitter</ref>
	<convertBodyTo type="java.io.InputStream"/>
	<camel:filter id="filter_stops3">
	  <camel:simple>${file:name} == "stops.txt"</camel:simple>
	  <camel:choice>
	    <camel:when>
	      <camel:simple>${body} != null</camel:simple>
	      <camel:setHeader name="Exchange.FILE_NAME">
		<camel:simple>${file:name}</camel:simple>
	      </camel:setHeader>
	      <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>

	      <camel:to uri="rml://?streamName=stops.txt&amp;mappings=#bean:rmlMappings&amp;baseIri=https://www.cefriel.com/data/&amp;baseIriPrefix=cef"/>
	      <camel:to uri="direct:lowerToCsv"/>
	    </camel:when>
	    <camel:otherwise>
	      <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
	    </camel:otherwise>
	  </camel:choice>
	</camel:filter>
      </camel:split>
    </camel:route>

    <camel:route id="roundtripAdd">
      <camel:from uri="seda:roundtripAdd"/>
      <camel:split streaming="true">
	<ref>zip_splitter</ref>
	<convertBodyTo type="java.io.InputStream"/>
	<camel:filter id="filter_stops4">
	  <camel:simple>${file:name} == "stops.txt"</camel:simple>
	  <camel:choice>
	    <camel:when>
	      <camel:simple>${body} != null</camel:simple>
	      <camel:setHeader name="Exchange.FILE_NAME">
		<camel:simple>${file:name}</camel:simple>
	      </camel:setHeader>
	      <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>

	      <camel:to uri="rml://?streamName=stops.txt&amp;mappings=#bean:rmlMappings&amp;baseIri=https://www.cefriel.com/data/&amp;baseIriPrefix=cef"/>
	      <camel:to uri="graph://add?chimeraResources=#bean:triples"/>
	      <camel:to uri="direct:lowerToCsv"/>

	    </camel:when>
	    <camel:otherwise>
	      <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
	    </camel:otherwise>
	  </camel:choice>
	</camel:filter>
      </camel:split>
    </camel:route>

    <camel:route id="roundtripInference">
      <camel:from uri="seda:roundtripInference"/>
      <camel:split streaming="true">
	<ref>zip_splitter</ref>
	<convertBodyTo type="java.io.InputStream"/>
	<camel:filter id="filter_stops5">
	  <camel:simple>${file:name} == "stops.txt"</camel:simple>
	  <camel:choice>
	    <camel:when>
	      <camel:simple>${body} != null</camel:simple>
	      <camel:setHeader name="Exchange.FILE_NAME">
		<camel:simple>${file:name}</camel:simple>
	      </camel:setHeader>
	      <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>

	      <camel:to uri="rml://?streamName=stops.txt&amp;mappings=#bean:rmlMappings&amp;baseIri=https://www.cefriel.com/data/&amp;baseIriPrefix=cef"/>
	      <camel:to uri="graph://inference?chimeraResources=#bean:ontologies"/>
	      <camel:to uri="direct:lowerToCsv"/>

	    </camel:when>
	    <camel:otherwise>
	      <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
	    </camel:otherwise>
	  </camel:choice>
	</camel:filter>
      </camel:split>
    </camel:route>

    <camel:route id="roundtripTemplate">
      <camel:from uri="seda:roundtripTemplate"/>
      <camel:split streaming="true">
	<ref>zip_splitter</ref>
	<convertBodyTo type="java.io.InputStream"/>
	<camel:filter id="filter_stops6">
	  <camel:simple>${file:name} == "stops.txt"</camel:simple>
	  <camel:choice>
	    <camel:when>
	      <camel:simple>${body} != null</camel:simple>
	      <camel:setHeader name="Exchange.FILE_NAME">
		<camel:simple>${file:name}</camel:simple>
	      </camel:setHeader>
	      <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>

	      <camel:to uri= "mapt://csv?template=#bean:liftingTemplate&amp;format=turtle"/>
	      <camel:to uri="graph://get?rdfFormat=turtle"/>
	      <camel:to uri="graph://shacl?chimeraResources=#bean:shaclShapes"/>
	      <camel:to uri="direct:lowerToCsv"/>

	    </camel:when>
	    <camel:otherwise>
	      <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
	    </camel:otherwise>
	  </camel:choice>
	</camel:filter>
      </camel:split>
    </camel:route>

  </camelContext>
</beans>
