<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:camel="http://camel.apache.org/schema/spring"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
  <bean class="com.cefriel.chimera.processor.AttachGraph" id="attach_graph">
    <property name="context" value="false"/>
  </bean>
  <bean class="com.cefriel.chimera.processor.rml.RMLCamelProcessor" id="rml_lifter"/>
    <bean class="com.cefriel.chimera.processor.rml.RMLOptions" id="rml_config_gtfs_lifting">
    <property name="mappings">
      <util:list id="mappingsArray">
        <value>./mappings.rml.ttl</value>
      </util:list>
    </property>
    <property name="baseIRI">
        <value>https://www.cefriel.com/data/</value>
    </property>
    <property name="baseIRIPrefix" value="cef"/>
  </bean>
  <bean class="com.cefriel.chimera.processor.enrich.UrlDataEnricher" id="url_enricher"/>
  <bean class="com.cefriel.chimera.processor.enrich.ConstructQueryEnricher" id="construct_enricher">
    <property name="baseUrl" value="file://./"/>
    <property name="queriesId" value="construct.ttl"/>
  </bean>
  <bean class="com.cefriel.chimera.processor.rdf4j.InferenceEnricher" id="inference_enricher">
    <property name="ontologyUrls">
      <util:list>
        <value>file://./ontology.owl</value>
      </util:list>
    </property>
    <property name="ontologyRDFFormat">
      <value>rdfxml</value>
    </property>
  </bean>
  <bean class="com.cefriel.chimera.processor.template.TemplateLowererProcessor" id="template_lower">
    <property name="attachmentToExchange" value="true"/>
  </bean>
    <bean class="com.cefriel.chimera.processor.template.TemplateLowererOptions" id="template_config_gtfs_stops">
    <property name="templatePath" value="./template.vm"/>
    <property name="destFileName" value="stops.txt"/>
    <property name="trimTemplate" value="false"/>
  </bean>
  <bean class="com.cefriel.chimera.processor.DumpGraph" id="graph_dumper"/>
  <!-- Utilities -->
  <bean class="com.cefriel.chimera.processor.rml.InputStreamToMapProcessor" id="is_processor"/>
  <bean class="org.apache.camel.dataformat.zipfile.ZipSplitter" id="zip_splitter"/>
  <bean class="com.cefriel.chimera.processor.onexception.OnExceptionInspectProcessor" id="inspect_ex"/>
  <!-- Advanced config -->
  <bean class="com.cefriel.chimera.tutorial.metrics.MicrometerConfig" id="micrometerConfig"/>
  <bean class="com.cefriel.chimera.tutorial.metrics.SedaMetricsProcessor" id="sedaMetrics"/>
  <bean factory-bean="micrometerConfig" factory-method="meterRegistry" id="meterRegistry"/>
  <bean class="org.apache.camel.component.micrometer.routepolicy.MicrometerRoutePolicyFactory" id="micrometerRoutePolicyFactory"/>
  <bean class="org.apache.camel.component.micrometer.messagehistory.MicrometerMessageHistoryFactory" id="micrometerMessageHistoryFactory"/>
  <!-- Camel routes -->
  <camelContext id="chimera_tutorial_context" messageHistory="true" streamCache="true" trace="false" xmlns="http://camel.apache.org/schema/spring">
    <jmxAgent disabled="true" id="agent"/>
    <!-- Exceptions management -->
    <onException>
      <exception>java.lang.Exception</exception>
      <redeliveryPolicy maximumRedeliveries="0"/>
      <handled><constant>false</constant></handled>
      <camel:process ref="inspect_ex"/>
    </onException>
    <camel:restConfiguration component="undertow" contextPath="/chimera-demo" port="8888"/>
    <!-- Converter input routes -->
    <camel:rest id="restTutorial">
      <camel:post uri="/roundtrip/gtfs">
        <camel:to uri="seda:conversion?timeout=0"/>
      </camel:post>
      <camel:post uri="/lift/gtfs">
        <camel:to uri="seda:lifting?timeout=0"/>
      </camel:post>
      <camel:post uri="/load">
        <camel:to uri="seda:loadresource?timeout=0"/>
      </camel:post>
      <camel:get uri="/metrics">
        <camel:to uri="seda:scrape?timeout=0"/>
      </camel:get>
    </camel:rest>
    <!-- Main routes -->
    <camel:route id="scrape">
      <camel:from uri="seda:scrape"/>
      <camel:transform>
        <camel:method id="scrape_m" method="scrape()" ref="meterRegistry"/>
      </camel:transform>
      <camel:setHeader name="Content-Type">
        <constant>text/plain</constant>
      </camel:setHeader>
    </camel:route>
    <camel:route id="lifting">
      <camel:from uri="seda:lifting"/>
      <camel:setHeader name="seda_endpoint"><constant>seda:lifting</constant></camel:setHeader>
      <camel:process ref="sedaMetrics"/>
      <camel:to uri="micrometer:summary:seda_queue_size?value=${header.seda_queue_size}&amp;tags=routeId=lifting"/>
      <camel:to uri="micrometer:timer:processing_time?action=start&amp;tags=routeId=lifting"/>
      <camel:to uri="micrometer:counter:num_executions?increment=1&amp;tags=routeId=lifting"/>
      <camel:process id="attachGraphLifting" ref="attach_graph"/>
      <camel:to uri="direct:lifting_component?timeout=0"/>
      <camel:to uri="direct:enrich_component?timeout=0"/>
      <camel:process id="serialiseGraph" ref="graph_dumper"/>
      <camel:convertBodyTo type="String" charset="UTF-8"/>
      <camel:to uri="micrometer:timer:processing_time?action=stop&amp;tags=routeId=lifting"/>
      <camel:setProperty name="CamelCharsetName">
        <constant>utf-8</constant>
      </camel:setProperty>
      <camel:setHeader name="Content-Disposition">
        <simple>inline; filename="dump.ttl"</simple>
      </camel:setHeader>
    </camel:route>
    <camel:route id="load">
      <camel:from uri="seda:loadresource"/>
      <camel:to id="save_locally" uri="file:?fileName=${header.filename}&amp;autoCreate=true"/>
      <camel:setHeader name="Content-Type">
        <camel:constant>text/plain</camel:constant>
      </camel:setHeader>
      <setBody>
        <simple>File saved. Use it as an additional source adding to the request header [additional_source:${header.filename}].</simple>
      </setBody>
    </camel:route>
    <camel:route id="conversion">
      <camel:from uri="seda:conversion"/>
      <camel:setHeader name="seda_endpoint"><constant>seda:conversion</constant></camel:setHeader>
      <camel:process ref="sedaMetrics"/>
      <camel:to uri="micrometer:summary:seda_queue_size?value=${header.seda_queue_size}&amp;tags=routeId=roundtrip_conversion"/>
      <camel:to uri="micrometer:timer:processing_time?action=start&amp;tags=routeId=roundtrip_conversion"/>
      <camel:to uri="micrometer:counter:num_executions?increment=1&amp;tags=routeId=roundtrip_conversion"/>
      <camel:log loggingLevel="WARN" message="Converting GTFS"/>
      <camel:process id="attachGraphConversion" ref="attach_graph"/>
      <camel:to uri="direct:lifting_component?timeout=0"/>
      <camel:to uri="direct:enrich_component?timeout=0"/>
      <camel:to uri="direct:lowering_component?timeout=0"/>
      <camel:to uri="micrometer:timer:processing_time?action=stop&amp;tags=routeId=roundtrip_conversion"/>
      <camel:setHeader name="Content-Type">
        <constant>text/csv</constant>
      </camel:setHeader>
      <camel:setHeader name="Content-Disposition">
        <simple>inline; filename="stops.txt"</simple>
      </camel:setHeader>
    </camel:route>
    <!-- LIFTING RML -->
    <camel:route id="lift_fragment">
      <camel:from uri="direct:lifting_component"/>
          <camel:log loggingLevel="INFO" message="Lifting GTFS"/>
          <camel:split streaming="true">
            <ref>zip_splitter</ref>
            <convertBodyTo type="java.io.InputStream"/>
            <camel:filter id="filter_stops">
              <camel:simple>${file:name} == "stops.txt"</camel:simple>
              <camel:choice>
                <camel:when>
                  <camel:simple>${body} != null</camel:simple>
                  <camel:setHeader name="Exchange.FILE_NAME">
                    <camel:simple>${file:name}</camel:simple>
                  </camel:setHeader>
                  <camel:log loggingLevel="INFO" message="Converting ${file:name}"/>
                  <camel:process ref="is_processor"/>
                  <camel:setHeader name="rml_config">
                    <simple>${ref:rml_config_gtfs_lifting}</simple>
                  </camel:setHeader>
                  <camel:process id="execute_mappings" ref="rml_lifter"/>
                </camel:when>
                <camel:otherwise>
                  <camel:log loggingLevel="INFO" message="$simple{file:name} is empty"/>
                </camel:otherwise>
              </camel:choice>
            </camel:filter>
          </camel:split>
    </camel:route>
    <!-- LOWERING TEMPLATE-LOWERER -->
    <camel:route id="lowering_fragment">
      <camel:from uri="direct:lowering_component"/>
      <camel:log loggingLevel="INFO" message="Lowering to GTFS"/>
      <camel:setHeader name="template_config">
        <simple>${ref:template_config_gtfs_stops}</simple>
      </camel:setHeader>
      <camel:process ref="template_lower"/>
      <camel:log loggingLevel="INFO" message="Lowering completed"/>
      <camel:setBody>
        <simple>${body}</simple>
      </camel:setBody>
    </camel:route>
    <!-- ENRICH - INFERENCE -->
    <camel:route>
      <camel:from uri="direct:enrich_component" />
      <camel:choice>
        <camel:when>
          <camel:simple>${header.additional_source} != null &amp;&amp; ${header.additional_source} not contains '://'</camel:simple>
          <camel:setHeader name="additional_source">
            <camel:simple>file://./$simple{header.additional_source}</camel:simple>
          </camel:setHeader>
        </camel:when>
      </camel:choice>
      <camel:choice>
        <camel:when>
          <camel:simple>${header.construct} == true</camel:simple>
          <camel:process id="add_construct" ref="construct_enricher"/>
        </camel:when>
      </camel:choice>
      <camel:process id="enrich_kg" ref="url_enricher"/>
      <camel:choice>
        <camel:when>
          <camel:simple>${header.inference} == true</camel:simple>
          <camel:process id="add_inference" ref="inference_enricher"/>
        </camel:when>
      </camel:choice>
    </camel:route>
  </camelContext>
</beans>
